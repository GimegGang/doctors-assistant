// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: medicine.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicineService_AddSchedule_FullMethodName = "/medicine.MedicineService/AddSchedule"
	MedicineService_Schedules_FullMethodName   = "/medicine.MedicineService/Schedules"
	MedicineService_Schedule_FullMethodName    = "/medicine.MedicineService/Schedule"
	MedicineService_NextTakings_FullMethodName = "/medicine.MedicineService/NextTakings"
)

// MedicineServiceClient is the client API for MedicineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicineServiceClient interface {
	AddSchedule(ctx context.Context, in *AddScheduleRequest, opts ...grpc.CallOption) (*AddScheduleResponse, error)
	Schedules(ctx context.Context, in *SchedulesRequest, opts ...grpc.CallOption) (*SchedulesResponse, error)
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	NextTakings(ctx context.Context, in *NextTakingsRequest, opts ...grpc.CallOption) (*NextTakingsResponse, error)
}

type medicineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicineServiceClient(cc grpc.ClientConnInterface) MedicineServiceClient {
	return &medicineServiceClient{cc}
}

func (c *medicineServiceClient) AddSchedule(ctx context.Context, in *AddScheduleRequest, opts ...grpc.CallOption) (*AddScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScheduleResponse)
	err := c.cc.Invoke(ctx, MedicineService_AddSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicineServiceClient) Schedules(ctx context.Context, in *SchedulesRequest, opts ...grpc.CallOption) (*SchedulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchedulesResponse)
	err := c.cc.Invoke(ctx, MedicineService_Schedules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicineServiceClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, MedicineService_Schedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicineServiceClient) NextTakings(ctx context.Context, in *NextTakingsRequest, opts ...grpc.CallOption) (*NextTakingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextTakingsResponse)
	err := c.cc.Invoke(ctx, MedicineService_NextTakings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicineServiceServer is the server API for MedicineService service.
// All implementations must embed UnimplementedMedicineServiceServer
// for forward compatibility.
type MedicineServiceServer interface {
	AddSchedule(context.Context, *AddScheduleRequest) (*AddScheduleResponse, error)
	Schedules(context.Context, *SchedulesRequest) (*SchedulesResponse, error)
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	NextTakings(context.Context, *NextTakingsRequest) (*NextTakingsResponse, error)
	mustEmbedUnimplementedMedicineServiceServer()
}

// UnimplementedMedicineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicineServiceServer struct{}

func (UnimplementedMedicineServiceServer) AddSchedule(context.Context, *AddScheduleRequest) (*AddScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchedule not implemented")
}
func (UnimplementedMedicineServiceServer) Schedules(context.Context, *SchedulesRequest) (*SchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedules not implemented")
}
func (UnimplementedMedicineServiceServer) Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedMedicineServiceServer) NextTakings(context.Context, *NextTakingsRequest) (*NextTakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextTakings not implemented")
}
func (UnimplementedMedicineServiceServer) mustEmbedUnimplementedMedicineServiceServer() {}
func (UnimplementedMedicineServiceServer) testEmbeddedByValue()                         {}

// UnsafeMedicineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicineServiceServer will
// result in compilation errors.
type UnsafeMedicineServiceServer interface {
	mustEmbedUnimplementedMedicineServiceServer()
}

func RegisterMedicineServiceServer(s grpc.ServiceRegistrar, srv MedicineServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicineService_ServiceDesc, srv)
}

func _MedicineService_AddSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServiceServer).AddSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicineService_AddSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServiceServer).AddSchedule(ctx, req.(*AddScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicineService_Schedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServiceServer).Schedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicineService_Schedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServiceServer).Schedules(ctx, req.(*SchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicineService_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServiceServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicineService_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServiceServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicineService_NextTakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextTakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicineServiceServer).NextTakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicineService_NextTakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicineServiceServer).NextTakings(ctx, req.(*NextTakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicineService_ServiceDesc is the grpc.ServiceDesc for MedicineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medicine.MedicineService",
	HandlerType: (*MedicineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSchedule",
			Handler:    _MedicineService_AddSchedule_Handler,
		},
		{
			MethodName: "Schedules",
			Handler:    _MedicineService_Schedules_Handler,
		},
		{
			MethodName: "Schedule",
			Handler:    _MedicineService_Schedule_Handler,
		},
		{
			MethodName: "NextTakings",
			Handler:    _MedicineService_NextTakings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medicine.proto",
}
